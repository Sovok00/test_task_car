from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python_operator import PythonOperator
from airflow.operators.empty import EmptyOperator
from airflow.providers.amazon.aws.hooks.s3 import S3Hook
from airflow.providers.postgres.hooks.postgres import PostgresHook
import pandas as pd
import os
from airflow.utils.log.logging_mixin import LoggingMixin
import io
import requests
import time
import xml.etree.ElementTree as ET
from airflow.hooks.base import BaseHook
from airflow.models import Variable

logger = LoggingMixin().log

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö EC2 –¥–ª—è AWS
os.environ['AWS_EC2_METADATA_DISABLED'] = 'true'

# Telegram Bot Settings
telegram_conn = BaseHook.get_connection('telegram_default')
TELEGRAM_BOT_TOKEN = telegram_conn.extra_dejson['token']
TELEGRAM_CHAT_ID = telegram_conn.extra_dejson['chat_id']

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEFAULT_CURRENCY = 'R01090B'  # BYN
MAX_RETRIES = 3
RETRY_DELAY = timedelta(minutes=1)
DATA_RETENTION_DAYS = 30

# –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è DAG
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2025, 5, 14),
    'retries': 2,
    'retry_delay': RETRY_DELAY,
    'email_on_failure': False,
    'email_on_retry': False,
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ DAG
dag = DAG(
    'test_car_5_tg',
    default_args=default_args,
    description='ETL –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ —Ä—É–±–ª–∏',
    schedule_interval='10 8,14,18 * * 1-6',  # –° –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ —Å—É–±–±–æ—Ç—É –≤ 00:00
    catchup=False,
    max_active_runs=1,
    tags=['car_prices', 'etl'],
    doc_md=__doc__,
)


def send_telegram_message(message, disable_notification=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML',
        'disable_notification': str(disable_notification).lower()
    }
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        logger.info("Telegram notification sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to send Telegram notification: {str(e)}")
        return False


def notify_start(**context):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DAG"""
    execution_date = context['execution_date']
    message = (
        f"üöÄ <b>–ó–∞–ø—É—â–µ–Ω DAG test_car_5_tg</b>\n"
        f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_date}\n"
        f"–ü–æ–ø—ã—Ç–∫–∞: {context['ti'].try_number}"
    )
    return send_telegram_message(message)


def notify_success(**context):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DAG"""
    execution_date = context['execution_date']
    dag_run = context['dag_run']

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å start_date –∏ end_date
    duration = ""
    if dag_run.start_date and dag_run.end_date:
        duration = f"\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {dag_run.end_date - dag_run.start_date}"
    elif dag_run.start_date:
        duration = f"\nDAG –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {dag_run.start_date}"

    message = (
        f"‚úÖ <b>DAG test_car_5_tg —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n"
        f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_date}"
        f"{duration}"
    )
    return send_telegram_message(message)


def notify_failure(context):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DAG"""
    execution_date = context['execution_date']
    task_instance = context['task_instance']
    exception = context.get('exception', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

    message = (
        f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ DAG test_car_5_tg</b>\n"
        f"–ó–∞–¥–∞—á–∞: {task_instance.task_id}\n"
        f"–û—à–∏–±–∫–∞: {str(exception)}\n"
        f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_date}\n"
        f"–ü–æ–ø—ã—Ç–∫–∞: {task_instance.try_number}/{task_instance.max_tries + 1}"
    )
    return send_telegram_message(message, disable_notification=False)


def examination_s3(**context):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ S3, –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π –±–∞–∫–µ—Ç —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º,
    –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É car_prices_day
    """
    execution_date = context['execution_date']
    s3_hook = S3Hook(aws_conn_id='minio_conn')
    s3_client = s3_hook.get_conn()
    s3_client._endpoint.host = 'http://minio:9000'

    source_bucket = 'car-prices-bucket'
    archive_bucket = 'car-prices-archive'
    file_key = f'cars_{execution_date.strftime("%Y%m%d")}.csv'
    new_file_key = f'cars_{execution_date.strftime("%Y%m%d")}_{datetime.now().strftime("%Y%m%d%H%M%S")}.csv'

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –±–∞–∫–µ—Ç–µ
        if not s3_hook.check_for_key(file_key, source_bucket):
            error_msg = f"–§–∞–π–ª {file_key} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∫–µ—Ç–µ {source_bucket}"
            send_telegram_message(f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ</b>\n{error_msg}")
            raise ValueError(error_msg)

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π –±–∞–∫–µ—Ç —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
        s3_client.copy_object(
            Bucket=archive_bucket,
            Key=new_file_key,
            CopySource={'Bucket': source_bucket, 'Key': file_key}
        )
        logger.info(f"File copied to archive bucket: {new_file_key}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –±–∞–∫–µ—Ç–∞
        file_obj = s3_client.get_object(Bucket=archive_bucket, Key=new_file_key)
        raw_data = file_obj['Body'].read()

        # –ü–∞—Ä—Å–∏–º CSV —Ñ–∞–π–ª
        for encoding in ['utf-8-sig', 'utf-16', 'windows-1251']:
            try:
                df = pd.read_csv(io.BytesIO(raw_data), encoding=encoding)

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                required_columns = ['brand', 'model', 'engine_volume',
                                    'manufacture_year', 'price_foreign', 'file_actual_date']
                if not all(col in df.columns for col in required_columns):
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
                df['engine_volume'] = df['engine_volume'].astype(float)
                df['manufacture_year'] = df['manufacture_year'].astype(int)
                df['price_foreign'] = df['price_foreign'].astype(float)
                df['file_actual_date'] = pd.to_datetime(df['file_actual_date']).dt.date

                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º execution_date –≤ —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ DataFrame
                # df['processing_date'] = execution_date.strftime('%Y-%m-%d %H:%M:%S')
                df['processing_date'] = datetime.now()

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                hook = PostgresHook(postgres_conn_id='postgres_default')
                engine = hook.get_sqlalchemy_engine()

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
                with engine.begin() as conn:
                    conn.execute("TRUNCATE TABLE car_prices_day")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df.to_sql(
                    'car_prices_day',
                    engine,
                    if_exists='append',
                    index=False,
                    method='multi'
                )

                logger.info(f"Successfully loaded {len(df)} records to car_prices_day")
                return True

            except UnicodeDecodeError:
                continue
            except Exception as e:
                logger.error(f"Error processing data with {encoding} encoding: {str(e)}")
                raise

        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ examination_s3: {str(e)}"
        send_telegram_message(f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n{error_msg}")
        raise


def examination_cbr(**context):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç –Ω–∞ —Å–∞–π—Ç–µ –¶–ë,
    –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É currency_rates_day
    """
    execution_date = context['execution_date']

    # –î–ª—è —Å—É–±–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø—è—Ç–Ω–∏—Ü—É
    if execution_date.weekday() == 5:  # –°—É–±–±–æ—Ç–∞
        execution_date = execution_date - timedelta(days=1)
        if execution_date.weekday() == 5:
            execution_date = execution_date - timedelta(days=1)

    date_str = execution_date.strftime('%d/%m/%Y')
    url = f'https://www.cbr.ru/scripts/XML_daily.asp?date_req={date_str}'

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        root = ET.fromstring(response.text)

        # –ò—â–µ–º –Ω—É–∂–Ω—É—é –≤–∞–ª—é—Ç—É
        for valute in root.findall('Valute'):
            if valute.get('ID') == DEFAULT_CURRENCY:
                nominal = int(valute.find('Nominal').text)
                value = float(valute.find('Value').text.replace(',', '.'))
                rate = value / nominal

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                data = {
                    'valute_id': valute.get('ID'),
                    'char_code': valute.find('CharCode').text,
                    'name': valute.find('Name').text,
                    'nominal': nominal,
                    'value': value,
                    'rate_date': execution_date.date(),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ date
                    'processing_date': datetime.now()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–æ execution_date
                }

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                hook = PostgresHook(postgres_conn_id='postgres_default')
                engine = hook.get_sqlalchemy_engine()

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
                with engine.begin() as conn:
                    conn.execute("TRUNCATE TABLE currency_rates_day")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                pd.DataFrame([data]).to_sql(
                    'currency_rates_day',
                    engine,
                    if_exists='append',
                    index=False
                )

                logger.info(f"Successfully loaded currency rate for {valute.find('CharCode').text}")
                return True

        error_msg = f"Currency with ID {DEFAULT_CURRENCY} not found in response"
        send_telegram_message(f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ</b>\n{error_msg}")
        raise ValueError(error_msg)

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ examination_cbr: {str(e)}"
        send_telegram_message(f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n{error_msg}")
        raise


def association_car_cbr(**context):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏,
    –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    """
    execution_date = context['execution_date']
    hook = PostgresHook(postgres_conn_id='postgres_default')
    engine = hook.get_sqlalchemy_engine()

    current_time = datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è processing_date

    try:
        with engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º car_prices_day
            car_count = conn.execute("SELECT COUNT(*) FROM car_prices_day").scalar()
            if car_count == 0:
                error_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ car_prices_day"
                send_telegram_message(f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ</b>\n{error_msg}")
                raise ValueError(error_msg)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º currency_rates_day
            rate_count = conn.execute("SELECT COUNT(*) FROM currency_rates_day").scalar()
            if rate_count == 0:
                error_msg = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ currency_rates_day"
                send_telegram_message(f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ</b>\n{error_msg}")
                raise ValueError(error_msg)

            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã
            rate_result = conn.execute("""
                SELECT value / nominal as rate 
                FROM currency_rates_day 
                LIMIT 1
            """)
            rate = rate_result.scalar()

            if not rate:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"
                send_telegram_message(f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n{error_msg}")
                raise ValueError(error_msg)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
            conn.execute("""
                UPDATE car_prices_day 
                SET price_rub = price_foreign * %s
            """, (rate,))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_data_count = conn.execute("""
                SELECT COUNT(*) 
                FROM car_prices_day cpd
                LEFT JOIN car_prices cp ON 
                    cpd.brand = cp.brand AND 
                    cpd.model = cp.model AND 
                    cpd.engine_volume = cp.engine_volume AND 
                    cpd.manufacture_year = cp.manufacture_year AND 
                    cpd.file_actual_date = cp.file_actual_date
                WHERE cp.car_id IS NULL OR 
                    (cp.price_foreign != cpd.price_foreign OR cp.price_rub != cpd.price_rub)
            """).scalar()

            if new_data_count == 0:
                send_telegram_message("‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n–°–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å")
                return True

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É car_prices
            conn.execute("""
                            INSERT INTO car_prices 
                            (brand, model, engine_volume, manufacture_year, 
                             price_foreign, price_rub, file_actual_date, processing_date)
                            SELECT 
                                brand, model, engine_volume, manufacture_year, 
                                price_foreign, price_rub, file_actual_date, %s
                            FROM car_prices_day
                            ON CONFLICT (brand, model, engine_volume, manufacture_year, file_actual_date) 
                            DO UPDATE SET 
                                price_foreign = EXCLUDED.price_foreign,
                                price_rub = EXCLUDED.price_rub,
                                processing_date = EXCLUDED.processing_date
                        """, (current_time,))

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É currency_rates
            conn.execute("""
                            INSERT INTO currency_rates 
                            (valute_id, char_code, name, nominal, value, rate_date, processing_date)
                            SELECT 
                                valute_id, char_code, name, nominal, value, rate_date, %s
                            FROM currency_rates_day
                            ON CONFLICT (valute_id, rate_date) 
                            DO UPDATE SET 
                                char_code = EXCLUDED.char_code,
                                name = EXCLUDED.name,
                                nominal = EXCLUDED.nominal,
                                value = EXCLUDED.value,
                                processing_date = EXCLUDED.processing_date
                        """, (current_time,))

            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            conn.execute("""
                            INSERT INTO car_prices_arch 
                            (brand, model, engine_volume, manufacture_year, 
                             price_foreign, price_rub, file_actual_date, processing_date)
                            SELECT 
                                brand, model, engine_volume, manufacture_year, 
                                price_foreign, price_rub, file_actual_date, %s
                            FROM car_prices_day
                        """, (current_time,))

            conn.execute("""
                            INSERT INTO currency_rates_arch 
                            (valute_id, char_code, name, nominal, value, rate_date, processing_date)
                            SELECT 
                                valute_id, char_code, name, nominal, value, rate_date, %s
                            FROM currency_rates_day
                        """, (current_time,))

            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
            logger.info("Truncating temporary tables...")
            conn.execute("TRUNCATE TABLE car_prices_day")
            conn.execute("TRUNCATE TABLE currency_rates_day")
            logger.info("Temporary tables truncated successfully")
            # row_count = conn.execute("SELECT COUNT(*) FROM car_prices_day").scalar()
            # logger.info(f"car_prices_day now contains {row_count} rows (should be 0)")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            send_telegram_message(
                f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {new_data_count}\n"
                f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_date}"
            )

            return True

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ association_car_cbr: {str(e)}"
        send_telegram_message(f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n{error_msg}")
        raise


# Start and end tasks
start_task = PythonOperator(
    task_id='start_notification',
    python_callable=notify_start,
    provide_context=True,
    dag=dag,
)

end_task = PythonOperator(
    task_id='end_notification',
    python_callable=notify_success,
    provide_context=True,
    trigger_rule='all_success',
    dag=dag,
)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
examination_s3_task = PythonOperator(
    task_id='examination_s3',
    python_callable=examination_s3,
    provide_context=True,
    dag=dag,
)

examination_cbr_task = PythonOperator(
    task_id='examination_cbr',
    python_callable=examination_cbr,
    provide_context=True,
    dag=dag,
)

association_car_cbr_task = PythonOperator(
    task_id='association_car_cbr',
    python_callable=association_car_cbr,
    provide_context=True,
    dag=dag,
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
start_task >> [examination_s3_task, examination_cbr_task] >> association_car_cbr_task >> end_task